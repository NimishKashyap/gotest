import "errors"

// No type alias required
func divide(a, b int) (int,error) {
    return 0, errors.New("Cannot divide by zero")

    return 1, nil
}

// interface

type error interface {
    Error() string
}

type DivError struct {
    a, b int
}

// Always as receiver function with pointer
func (d *DivError) Error() string {
    return fp("Cannot divide by zero")
}


func div(a, b int)(int,error) {
    if b == 0{
        return 0, &DivError{a,b}
    } else {
        return a/b, nil
    }
}"

answer, err := div(9,0)
//

///////////////////////////////////
errors.Is() --> to find type

type UserError struct {
    Msg string
}

func (u *UserError) Error() string {
    return fp("User error: %v", string(u.Msg))
}

_, err := someFunc("sample")

if err != nil {
    var InputError = UserError("Input Error")

        if errors.Is(err, &InputError) {
            fp("Input ERror": err)
        } else {
            fp("Other error" )
        }
}

/////////////////////////////////////////////////
errors.As() ---> Convert it into specific error

var thisError *UserError
if errors.As(err, &tgusError) {
    fp("User error")
} else {
    fp("Other error")
}