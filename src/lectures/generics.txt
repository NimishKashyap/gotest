constraint, constraintA, constraintB == interface

func name [T constraint, U constraintA | constraintB](a T, b U) T {

}

func IsEqual[T comparable] (a,b T) bool {
    return a == b
}
IsEqual(2,2)
IsEqual("foo", "bar")
IsEqual('a','b')
// to provide type 
IsEqual[uint8](3,3)


type Integer32 interface {
    int32 | uint32
}
// approximation allows any type 
// that may be equal to the actual type of constraint

type Integer32 interface {
    ~int32 | uint32
}

// it has to work with exactly 
// the type 
func SumNumbers[T Integer32] (arr []T) T {
    var sum T 
    for i := 0;i<len(arr) ; i++ {
        sum += arr[i]
    }
    return sum
}


// Builtin constrains are also available

import "constrains"
type MyArray[T constrains.Ordered] struct {
    inner []T
}

func (m *MyArray[T]) Max() T { 
    max := m.inner[0]

    for index, value := range m
}