Bi directional communication 
    Two ended pipe operations

Utilizing channels


// create channel 

channel := make(chan int)

go func() {
    channel <- 1
}()
go func() {
    channel <- 2
}()
go func() {
    channel <- 3
}()

// Received from channel 
first := <- channel 
second := <- channel 
third := <- channel 

fp(first, second, third)

'
////////////////////////////
Channels can be buffered or unBuffered 
    UnBuffered channels will block when sending until a reader 
    is availbale 

channel := make(chan int, 2)

channel <- 1 
channel <- 2 

go func() {
    channel <- 3
}()


first := <- channel
second := <- channel
third := <- channel

fp(first,second, third)


UNIDIRECTIONAL CHANNEL 

Control channel


select keyword lets work with 

one := make(chan int)
two := make(chan int)


for {
    select {
        case o:= <- one :
            fp 
        case t:= <-two:
            fp
        case <- time.After(300 * time.Millisecond):
            fp(TIME OUT)
        default:
            fp("No data")
            time.Sleep(50*time.Millisecond)
    }
}